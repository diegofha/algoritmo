#include <iostream>
#include <stdio.h>
#include <stdlib.h>
#include <conio.h>

 
using namespace std;
// Función para dividir el array y hacer los intercambios
int divide(int *array, int inicio, int fin) {
    int izq;
    int der;
    int pivot;
    int temp;
 
    pivot = array[inicio];
    izq = inicio;
    der = fin;
 
    // Mientras no se cruzen los índices
    while (izq < der) {
        while (array[der] > pivot) {
            der--;
        }
 
        while ((izq < der) && (array[izq] <= pivot)) {
            izq++;
        }
 
        // Si todavía no se cruzan los indices seguimos intercambiando
        if (izq < der) {
            temp = array[izq];
            array[izq] = array[der];
            array[der] = temp;
        }
    }
 
    // Los índices ya se han cruzado, ponemos el pivot en el lugar que le corresponde
    temp = array[der];
    array[der] = array[inicio];
    array[inicio] = temp;
 
    // La nueva posición del pivot
    return der;
}
 
// Función recursiva para hacer el ordenamiento
void quicksort(int *array, int inicio, int final)
{
    int pivot;
 
    if (inicio < final) {
        pivot = divide(array, inicio, final);
 
        // Ordeno la lista de los menores
        quicksort(array, inicio, pivot - 1);
 
        // Ordeno la lista de los mayores
        quicksort(array, pivot + 1, final);
    }
}

void main(){
	int const MAX = 100;
    int n;
cout << "Ingresa tamaño: " << endl;
    cin >> n;
 
    int v[100];
	for (int i = 0; i < n; i++) {
        cin>> v[i];
    }

	cout << "vector antes de ordenarse: " << endl;
    for (int i = 0; i < n; i++) {
        cout << v[i] << " ";
    }
	cout << endl << endl;
 
    quicksort(v, 0, n - 1);
	 cout << "vector ordenado " << endl;
    for (int i = 0; i < n; i++ ){
        cout << v[i] << " ";
    }
 
    cout << endl << endl;
	getch();
}
